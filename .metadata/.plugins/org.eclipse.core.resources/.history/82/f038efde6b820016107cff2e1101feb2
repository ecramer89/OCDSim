/*should function like an enum class. Consider all of these objects "readonly". */
Concern ORGANIC=new Concern("Organic", .5);;
Concern BPA=new Concern("BPA", .5);
Concern HOT=new Concern("Hot", .5);
Concern UNFILTERED=new Concern("Unfiltered", .5);
Concern MOULDY=new Concern("Mouldy", .5); //starts for peanuts; generalizes to all nuts; then to all squashes; etc.

class Concern {
  boolean active; 
  String label;
  String confirm="Yes";
  String disaffirm="No";
  float probabilityUnsafe;


  Concern(String label, float probabilityUnsafe) {
    this.label=label;
    this.probabilityUnsafe=probabilityUnsafe;
  }



  String getMessage(boolean result) {
    return result? confirm : disaffirm;
  }

  boolean computeResult() {
    float result=random(1);
    return (result<=probabilityUnsafe);
  }

  void activate() {
    active=true;
  }

  boolean isActive() {
    return active;
  }

  String getLabel() {
    return label;
  }
}



class ConcernEvent {

  ArrayList<PImage> screens;
  ArrayList<String> messages;
  int currMessage=-1;
  int currScreen=-1;
  ArrayList<FoodType> foodsAffected; //some concernevents can generalize a concern to food types that previously weren't affected
  //by this concern (i.e., they can add it to the list; all subsequent food objects will inherit it)
  Concern concern;

  ConcernEvent(Concern concern, ArrayList<PImage> screens, ArrayList<String> messages) {
    this.screens=screens;
    this.messages=messages;
    this.concern=concern;
  }
  
  String nextMessage(){
    if(currMessage<messages.size()-1) currMessage++;
    return messages.get(currMessage);
    
  }
  
  PImage nextImage(){
    if(currScreen<screens.size()-1) currScreen++;
    return screens.get(currScreen);
    
    
    
  }

//!!to do, not all events will activate a concern... some might, some might deactivate a concern, some might add the concern to foods,
//some might remove them. need to re design to support this variety
  void trigger() {
    concern.activate();
    for(FoodType type : foodsAffected){
     type.addConcern(concern); 
    }
  }
}