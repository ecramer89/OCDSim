//assets
color sky=color(255);
Texture horizon;
ColorTexture ground;
PImage EMPTY_IMAGE;

ArrayList<ConcernEvent> events=new ArrayList<ConcernEvent>();
ArrayList<FoodType> foodTypes=new ArrayList<FoodType>();



void loadAssets() {
  horizon=new ImageTexture(loadImage("images/bg.tif"));
  ground=new ColorTexture(color(96, 165, 7));
  EMPTY_IMAGE=loadImage("images/empty.png");
  initializeFoodTypes();
  initializeConcernEvents();
}

ConcernEvent getNextConcernEvent() {

  if (currConcernEvent<events.size()-1) currConcernEvent++;
  return events.get(currConcernEvent);
}


FoodType getFoodType() {

  return foodTypes.get((int)random(foodTypes.size()));
}




void initializeFoodTypes() {
  FoodType apple=new FoodType(loadImage("/images/produce/Apple.png"), "Apple", "Eat the apple?");
  apple.addConcern(ORGANIC);
  foodTypes.add(apple);
}


void initializeConcernEvents() {
}


void loadImages(PImage[] to, String[] imgNames, String pathToFolder) {
  for (int i=0; i<imgNames.length; i++) {
    PImage img=loadImage(pathToFolder+imgNames[i]+".png"); 
    to[i]=img;
  }
}


/*class that represents a rectangular texture*/
class Texture {

  void apply() {
  }

  void resize(int width, int height) {
  }
}

class ImageTexture extends Texture {

  PImage img;
  ImageTexture(PImage img) {

    this.img=img;
  }

  void resize(int width, int height) {
    img.resize(width, height);
  }

  void apply() {
    image(img, -img.width/2, -img.height/2);
  }
}


class ColorTexture extends Texture {

  color fill;
  PVector dimensions=new PVector();

  ColorTexture(color fill) {
    this.fill=fill;
  }


  void resize(int width, int height) {
    dimensions.x=width;
    dimensions.y=height;
  }

  void apply() {
    pushStyle();
    noStroke();
    fill(fill);
    rect(-dimensions.x/2, -dimensions.y/2, dimensions.x, dimensions.y);
    popStyle();
  }
}